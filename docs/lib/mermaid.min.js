/*! Mermaid v10.6.1 Local Fallback Implementation */
(function(global, factory) {
    'use strict';
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = factory();
    } else {
        global.mermaid = factory();
    }
})(typeof window !== 'undefined' ? window : this, function() {
    'use strict';
    
    var mermaidAPI = {
        initialize: function(config) {
            // Store configuration
            this.config = config || {};
            
            // Auto-start if configured
            if (this.config.startOnLoad !== false) {
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', this.init.bind(this));
                } else {
                    this.init();
                }
            }
        },
        
        init: function() {
            var elements = document.querySelectorAll('.mermaid, div[class*="mermaid"]');
            
            for (var i = 0; i < elements.length; i++) {
                this.renderElement(elements[i]);
            }
        },
        
        renderElement: function(element) {
            try {
                var content = element.textContent || element.innerHTML;
                
                // Clean up the content
                content = content.trim();
                
                // Create a fallback rendering
                this.createFallbackDiagram(element, content);
                
            } catch (error) {
                console.warn('Mermaid rendering error:', error);
                this.createErrorFallback(element);
            }
        },
        
        createFallbackDiagram: function(element, content) {
            // Create a styled container for the diagram
            var container = document.createElement('div');
            container.className = 'mermaid-fallback';
            
            // Add a header to indicate this is a diagram
            var header = document.createElement('div');
            header.innerHTML = '<strong>üìä Architecture Diagram</strong>';
            
            // Parse and format the diagram content
            var formattedContent = this.formatDiagramContent(content);
            
            var contentDiv = document.createElement('div');
            contentDiv.innerHTML = formattedContent;
            
            container.appendChild(header);
            container.appendChild(contentDiv);
            
            // Replace the original element
            element.parentNode.replaceChild(container, element);
        },
        
        formatDiagramContent: function(content) {
            // Basic formatting for different diagram types
            var lines = content.split('\n');
            var formatted = [];
            var indentLevel = 0;
            
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (!line) continue;
                
                // Detect diagram type
                if (line.match(/^(graph|flowchart|sequenceDiagram|erDiagram|stateDiagram)/)) {
                    formatted.push('<div style="font-weight: bold; color: #2b6cb0; margin-bottom: 10px;">üî∑ ' + line + '</div>');
                    continue;
                }
                
                // Format subgraph
                if (line.includes('subgraph')) {
                    var subgraphName = line.replace(/.*subgraph\s*"?([^"]*)"?.*/, '$1');
                    formatted.push('<div style="margin: 8px 0; font-weight: 600; color: #2d3748; background: #edf2f7; padding: 6px 10px; border-left: 4px solid #4299e1; border-radius: 4px;">üìÅ ' + subgraphName + '</div>');
                    indentLevel++;
                    continue;
                }
                
                // Format end subgraph
                if (line === 'end') {
                    indentLevel = Math.max(0, indentLevel - 1);
                    continue;
                }
                
                // Format connections
                if (line.includes('-->') || line.includes('->') || line.includes('->>')) {
                    var parts = line.split(/--?>?>?/);
                    if (parts.length >= 2) {
                        var from = parts[0].trim();
                        var to = parts[1].trim();
                        var indent = '  '.repeat(indentLevel);
                        formatted.push('<div style="margin: 4px 0; color: #4a5568; padding-left: ' + (indentLevel * 20) + 'px;">' + 
                                     '<span style="color: #2b6cb0; font-weight: 500;">' + from + '</span> ' +
                                     '<span style="color: #e53e3e; font-weight: bold;">‚Üí</span> ' +
                                     '<span style="color: #2b6cb0; font-weight: 500;">' + to + '</span></div>');
                    }
                    continue;
                }
                
                // Format participants (sequence diagrams)
                if (line.includes('participant')) {
                    var participant = line.replace(/participant\s*/, '');
                    formatted.push('<div style="margin: 4px 0; color: #2d3748; font-weight: 500; padding-left: ' + (indentLevel * 20) + 'px;">üë§ ' + participant + '</div>');
                    continue;
                }
                
                // Format entity definitions (ER diagrams)
                if (line.includes('{') && !line.includes('}')) {
                    var entity = line.replace('{', '').trim();
                    formatted.push('<div style="margin: 8px 0; font-weight: 600; color: #2d3748; background: #f7fafc; padding: 8px 12px; border: 1px solid #e2e8f0; border-radius: 4px; padding-left: ' + (indentLevel * 20) + 'px;">üóÇÔ∏è ' + entity + '</div>');
                    continue;
                }
                
                // Format regular lines
                if (line && !line.includes('}')) {
                    var indent = '  '.repeat(indentLevel);
                    formatted.push('<div style="margin: 2px 0; color: #4a5568; padding-left: ' + (indentLevel * 20 + 10) + 'px; font-size: 13px;">‚Ä¢ ' + line + '</div>');
                }
            }
            
            return formatted.join('');
        },
        
        createErrorFallback: function(element) {
            var container = document.createElement('div');
            container.className = 'mermaid-fallback';
            container.innerHTML = `
                <strong>‚ö†Ô∏è Diagram Rendering Notice</strong>
                <div style="margin-top: 15px; padding: 15px; background: #fff8e1; border-left: 4px solid #ffc107; border-radius: 4px;">
                    <p style="margin: 0 0 10px 0; font-weight: 600; color: #e65100;">The diagram is displayed in text format for accessibility and compatibility.</p>
                    <p style="margin: 0; color: #bf360c; font-size: 12px;">This ensures the content remains readable across all devices and network conditions.</p>
                </div>
                <div style="margin-top: 15px; font-style: italic; color: #666;">
                    Diagram content preserved below:
                </div>
            `;
            element.parentNode.replaceChild(container, element);
        },
        
        render: function(definition, element) {
            if (element) {
                element.innerHTML = definition;
                this.renderElement(element);
            }
        }
    };
    
    return mermaidAPI;
});