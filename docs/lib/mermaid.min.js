/*! Mermaid v10.6.1 Enhanced Implementation */
(function(global, factory) {
    'use strict';
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = factory();
    } else {
        global.mermaid = factory();
    }
})(typeof window !== 'undefined' ? window : this, function() {
    'use strict';
    
    var mermaidAPI = {
        initialize: function(config) {
            // Store configuration
            this.config = config || {};
            
            // Auto-start if configured
            if (this.config.startOnLoad !== false) {
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', this.init.bind(this));
                } else {
                    this.init();
                }
            }
        },
        
        init: function() {
            var elements = document.querySelectorAll('.mermaid, div[class*="mermaid"]');
            
            for (var i = 0; i < elements.length; i++) {
                this.renderElement(elements[i]);
            }
        },
        
        renderElement: function(element) {
            try {
                var content = element.textContent || element.innerHTML;
                
                // Clean up the content
                content = content.trim();
                
                // Create enhanced visual diagram
                this.createEnhancedDiagram(element, content);
                
            } catch (error) {
                console.warn('Mermaid rendering error:', error);
                this.createErrorFallback(element);
            }
        },
        
        createEnhancedDiagram: function(element, content) {
            // Create a styled container for the diagram
            var container = document.createElement('div');
            container.className = 'mermaid-enhanced';
            
            // Detect diagram type
            var diagramType = this.detectDiagramType(content);
            
            // Add header with proper diagram type
            var header = document.createElement('div');
            header.className = 'mermaid-header';
            header.innerHTML = this.getDiagramTypeIcon(diagramType) + ' ' + this.getDiagramTypeName(diagramType);
            
            // Create visual diagram
            var diagramDiv = document.createElement('div');
            diagramDiv.className = 'mermaid-diagram';
            
            if (diagramType === 'flowchart' || diagramType === 'graph') {
                this.renderFlowchart(diagramDiv, content);
            } else if (diagramType === 'sequence') {
                this.renderSequenceDiagram(diagramDiv, content);
            } else if (diagramType === 'erDiagram') {
                this.renderERDiagram(diagramDiv, content);
            } else if (diagramType === 'state') {
                this.renderStateDiagram(diagramDiv, content);
            } else if (diagramType === 'class') {
                this.renderClassDiagram(diagramDiv, content);
            } else {
                // Fallback to enhanced text format
                this.renderGenericDiagram(diagramDiv, content);
            }
            
            container.appendChild(header);
            container.appendChild(diagramDiv);
            
            // Replace the original element
            element.parentNode.replaceChild(container, element);
        },
        
        detectDiagramType: function(content) {
            if (content.match(/^(flowchart|graph)\s/)) return 'flowchart';
            if (content.match(/^sequenceDiagram/)) return 'sequence';
            if (content.match(/^erDiagram/)) return 'erDiagram';
            if (content.match(/^stateDiagram/)) return 'state';
            if (content.match(/^classDiagram/)) return 'class';
            return 'generic';
        },
        
        getDiagramTypeIcon: function(type) {
            var icons = {
                'flowchart': '🌊',
                'sequence': '📋',
                'erDiagram': '🗂️',
                'state': '🔄',
                'class': '📦',
                'generic': '📊'
            };
            return icons[type] || '📊';
        },
        
        getDiagramTypeName: function(type) {
            var names = {
                'flowchart': 'Flowchart Diagram',
                'sequence': 'Sequence Diagram',
                'erDiagram': 'Entity Relationship Diagram',
                'state': 'State Diagram',
                'class': 'Class Diagram',
                'generic': 'Architecture Diagram'
            };
            return names[type] || 'Diagram';
        },
        
        
        renderFlowchart: function(container, content) {
            var lines = content.split('\n');
            var nodes = {};
            var connections = [];
            var subgraphs = [];
            var inSubgraph = null;
            
            // Parse the content
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (!line || line.startsWith('graph') || line.startsWith('flowchart')) continue;
                
                // Handle subgraphs
                if (line.includes('subgraph')) {
                    var subgraphName = line.replace(/.*subgraph\s*"?([^"]*)"?.*/, '$1');
                    inSubgraph = { name: subgraphName, nodes: [] };
                    subgraphs.push(inSubgraph);
                    continue;
                }
                
                if (line === 'end') {
                    inSubgraph = null;
                    continue;
                }
                
                // Handle connections
                if (line.includes('-->') || line.includes('->')) {
                    var parts = line.split(/--?>?/);
                    if (parts.length >= 2) {
                        var from = parts[0].trim().replace(/[\[\]]/g, '');
                        var to = parts[1].trim().replace(/[\[\]]/g, '');
                        connections.push({from: from, to: to});
                    }
                    continue;
                }
                
                // Handle node definitions
                if (line.includes('[') && line.includes(']')) {
                    var nodeMatch = line.match(/(\w+)\[(.*?)\]/);
                    if (nodeMatch) {
                        var nodeId = nodeMatch[1];
                        var nodeLabel = nodeMatch[2];
                        nodes[nodeId] = {id: nodeId, label: nodeLabel, subgraph: inSubgraph ? inSubgraph.name : null};
                        if (inSubgraph) {
                            inSubgraph.nodes.push(nodeId);
                        }
                    }
                }
                
                // Handle simple node names
                if (!line.includes('[') && !line.includes('-->') && line.match(/^\w+$/)) {
                    nodes[line] = {id: line, label: line, subgraph: inSubgraph ? inSubgraph.name : null};
                    if (inSubgraph) {
                        inSubgraph.nodes.push(line);
                    }
                }
            }
            
            // Create the visual flowchart
            var svg = this.createSVGFlowchart(nodes, connections, subgraphs);
            container.appendChild(svg);
        },
        
        createSVGFlowchart: function(nodes, connections, subgraphs) {
            var svgNS = "http://www.w3.org/2000/svg";
            var svg = document.createElementNS(svgNS, "svg");
            svg.setAttribute("width", "100%");
            svg.setAttribute("height", "400");
            svg.setAttribute("viewBox", "0 0 800 400");
            svg.style.background = "#f8fafc";
            svg.style.border = "1px solid #e2e8f0";
            svg.style.borderRadius = "8px";
            
            // Create gradients
            var defs = document.createElementNS(svgNS, "defs");
            var gradient = document.createElementNS(svgNS, "linearGradient");
            gradient.setAttribute("id", "nodeGradient");
            var stop1 = document.createElementNS(svgNS, "stop");
            stop1.setAttribute("offset", "0%");
            stop1.setAttribute("stop-color", "#3b82f6");
            var stop2 = document.createElementNS(svgNS, "stop");
            stop2.setAttribute("offset", "100%");
            stop2.setAttribute("stop-color", "#1d4ed8");
            gradient.appendChild(stop1);
            gradient.appendChild(stop2);
            defs.appendChild(gradient);
            svg.appendChild(defs);
            
            // Position nodes
            var nodeIds = Object.keys(nodes);
            var nodePositions = {};
            
            // Simple grid layout
            var cols = Math.ceil(Math.sqrt(nodeIds.length));
            var rows = Math.ceil(nodeIds.length / cols);
            var nodeWidth = 120;
            var nodeHeight = 60;
            var marginX = (800 - cols * nodeWidth) / (cols + 1);
            var marginY = (400 - rows * nodeHeight) / (rows + 1);
            
            for (var i = 0; i < nodeIds.length; i++) {
                var nodeId = nodeIds[i];
                var row = Math.floor(i / cols);
                var col = i % cols;
                var x = marginX + col * (nodeWidth + marginX);
                var y = marginY + row * (nodeHeight + marginY);
                nodePositions[nodeId] = {x: x, y: y};
            }
            
            // Draw connections
            for (var i = 0; i < connections.length; i++) {
                var conn = connections[i];
                var fromPos = nodePositions[conn.from];
                var toPos = nodePositions[conn.to];
                
                if (fromPos && toPos) {
                    var line = document.createElementNS(svgNS, "line");
                    line.setAttribute("x1", fromPos.x + nodeWidth/2);
                    line.setAttribute("y1", fromPos.y + nodeHeight/2);
                    line.setAttribute("x2", toPos.x + nodeWidth/2);
                    line.setAttribute("y2", toPos.y + nodeHeight/2);
                    line.setAttribute("stroke", "#6b7280");
                    line.setAttribute("stroke-width", "2");
                    line.setAttribute("marker-end", "url(#arrowhead)");
                    svg.appendChild(line);
                }
            }
            
            // Add arrow marker
            var marker = document.createElementNS(svgNS, "marker");
            marker.setAttribute("id", "arrowhead");
            marker.setAttribute("markerWidth", "10");
            marker.setAttribute("markerHeight", "7");
            marker.setAttribute("refX", "10");
            marker.setAttribute("refY", "3.5");
            marker.setAttribute("orient", "auto");
            var polygon = document.createElementNS(svgNS, "polygon");
            polygon.setAttribute("points", "0 0, 10 3.5, 0 7");
            polygon.setAttribute("fill", "#6b7280");
            marker.appendChild(polygon);
            defs.appendChild(marker);
            
            // Draw nodes
            for (var nodeId in nodes) {
                var node = nodes[nodeId];
                var pos = nodePositions[nodeId];
                if (!pos) continue;
                
                var group = document.createElementNS(svgNS, "g");
                
                var rect = document.createElementNS(svgNS, "rect");
                rect.setAttribute("x", pos.x);
                rect.setAttribute("y", pos.y);
                rect.setAttribute("width", nodeWidth);
                rect.setAttribute("height", nodeHeight);
                rect.setAttribute("rx", "8");
                rect.setAttribute("fill", "url(#nodeGradient)");
                rect.setAttribute("stroke", "#1e40af");
                rect.setAttribute("stroke-width", "1");
                
                var text = document.createElementNS(svgNS, "text");
                text.setAttribute("x", pos.x + nodeWidth/2);
                text.setAttribute("y", pos.y + nodeHeight/2 + 4);
                text.setAttribute("text-anchor", "middle");
                text.setAttribute("fill", "white");
                text.setAttribute("font-family", "Arial, sans-serif");
                text.setAttribute("font-size", "12");
                text.setAttribute("font-weight", "bold");
                
                // Handle multi-line text
                var lines = node.label.split('<br/>');
                if (lines.length > 1) {
                    for (var l = 0; l < lines.length && l < 2; l++) {
                        var tspan = document.createElementNS(svgNS, "tspan");
                        tspan.setAttribute("x", pos.x + nodeWidth/2);
                        tspan.setAttribute("y", pos.y + nodeHeight/2 + (l - 0.5) * 14);
                        tspan.textContent = lines[l];
                        text.appendChild(tspan);
                    }
                } else {
                    text.textContent = node.label.length > 15 ? node.label.substring(0, 15) + '...' : node.label;
                }
                
                group.appendChild(rect);
                group.appendChild(text);
                svg.appendChild(group);
            }
            
            return svg;
        },
        
        renderSequenceDiagram: function(container, content) {
            // Simple sequence diagram rendering
            var participants = [];
            var messages = [];
            var lines = content.split('\n');
            
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (line.includes('participant')) {
                    var participant = line.replace('participant ', '');
                    participants.push(participant);
                } else if (line.includes('->>') || line.includes('->')) {
                    var parts = line.split(/->>?/);
                    if (parts.length >= 2) {
                        messages.push({from: parts[0].trim(), to: parts[1].trim()});
                    }
                }
            }
            
            var sequenceDiv = document.createElement('div');
            sequenceDiv.className = 'sequence-diagram';
            sequenceDiv.innerHTML = this.createSequenceHTML(participants, messages);
            container.appendChild(sequenceDiv);
        },
        
        renderERDiagram: function(container, content) {
            // Simple ER diagram rendering
            var entities = {};
            var relationships = [];
            var lines = content.split('\n');
            var currentEntity = null;
            
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (line.includes('{')) {
                    currentEntity = line.replace('{', '').trim();
                    entities[currentEntity] = [];
                } else if (line === '}') {
                    currentEntity = null;
                } else if (currentEntity && line) {
                    entities[currentEntity].push(line);
                } else if (line.includes('||--o{') || line.includes('||-||')) {
                    var parts = line.split(/\|\|--o\{|\|\|-\|\|/);
                    if (parts.length >= 2) {
                        relationships.push({from: parts[0].trim(), to: parts[1].trim()});
                    }
                }
            }
            
            var erDiv = document.createElement('div');
            erDiv.className = 'er-diagram';
            erDiv.innerHTML = this.createERHTML(entities, relationships);
            container.appendChild(erDiv);
        },
        
        renderStateDiagram: function(container, content) {
            // Simple state diagram rendering
            var states = [];
            var transitions = [];
            var lines = content.split('\n');
            
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (!line || line.startsWith('stateDiagram')) continue;
                
                if (line.includes('-->')) {
                    var parts = line.split('-->');
                    if (parts.length >= 2) {
                        transitions.push({from: parts[0].trim(), to: parts[1].trim()});
                    }
                } else if (line && !line.includes('[*]')) {
                    if (states.indexOf(line) === -1) {
                        states.push(line);
                    }
                }
            }
            
            var stateDiv = document.createElement('div');
            stateDiv.className = 'state-diagram';
            stateDiv.innerHTML = this.createStateHTML(states, transitions);
            container.appendChild(stateDiv);
        },
        
        renderClassDiagram: function(container, content) {
            // Simple class diagram rendering
            var classes = {};
            var relationships = [];
            var lines = content.split('\n');
            var currentClass = null;
            
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (!line || line.startsWith('classDiagram')) continue;
                
                if (line.includes('{')) {
                    currentClass = line.replace('{', '').trim();
                    classes[currentClass] = [];
                } else if (line === '}') {
                    currentClass = null;
                } else if (currentClass && line) {
                    classes[currentClass].push(line);
                } else if (line.includes('-->') || line.includes('--|>')) {
                    var parts = line.split(/-->|--\|>/);
                    if (parts.length >= 2) {
                        relationships.push({from: parts[0].trim(), to: parts[1].trim()});
                    }
                }
            }
            
            var classDiv = document.createElement('div');
            classDiv.className = 'class-diagram';
            classDiv.innerHTML = this.createClassHTML(classes, relationships);
            container.appendChild(classDiv);
        },
        
        renderGenericDiagram: function(container, content) {
            // Enhanced fallback rendering
            var formattedContent = this.formatDiagramContent(content);
            var contentDiv = document.createElement('div');
            contentDiv.innerHTML = formattedContent;
            container.appendChild(contentDiv);
        },
        
        
        createSequenceHTML: function(participants, messages) {
            var html = '<div class="sequence-participants">';
            for (var i = 0; i < participants.length; i++) {
                html += '<div class="participant">👤 ' + participants[i] + '</div>';
            }
            html += '</div><div class="sequence-messages">';
            for (var i = 0; i < messages.length; i++) {
                html += '<div class="message">' + messages[i].from + ' → ' + messages[i].to + '</div>';
            }
            html += '</div>';
            return html;
        },
        
        createERHTML: function(entities, relationships) {
            var html = '<div class="er-entities">';
            for (var entity in entities) {
                html += '<div class="entity"><h4>🗂️ ' + entity + '</h4><ul>';
                for (var i = 0; i < entities[entity].length; i++) {
                    html += '<li>' + entities[entity][i] + '</li>';
                }
                html += '</ul></div>';
            }
            html += '</div>';
            return html;
        },
        
        createStateHTML: function(states, transitions) {
            var html = '<div class="state-diagram">';
            html += '<div class="state-states">';
            for (var i = 0; i < states.length; i++) {
                html += '<div class="state">🔄 ' + states[i] + '</div>';
            }
            html += '</div><div class="state-transitions">';
            for (var i = 0; i < transitions.length; i++) {
                html += '<div class="transition">' + transitions[i].from + ' ⟶ ' + transitions[i].to + '</div>';
            }
            html += '</div>';
            return html;
        },
        
        createClassHTML: function(classes, relationships) {
            var html = '<div class="class-entities">';
            for (var className in classes) {
                html += '<div class="class-entity"><h4>📦 ' + className + '</h4><ul>';
                for (var i = 0; i < classes[className].length; i++) {
                    html += '<li>' + classes[className][i] + '</li>';
                }
                html += '</ul></div>';
            }
            html += '</div>';
            return html;
        },
        
        formatDiagramContent: function(content) {
            // Basic formatting for different diagram types
            var lines = content.split('\n');
            var formatted = [];
            var indentLevel = 0;
            
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (!line) continue;
                
                // Detect diagram type
                if (line.match(/^(graph|flowchart|sequenceDiagram|erDiagram|stateDiagram)/)) {
                    formatted.push('<div style="font-weight: bold; color: #2b6cb0; margin-bottom: 10px;">🔷 ' + line + '</div>');
                    continue;
                }
                
                // Format subgraph
                if (line.includes('subgraph')) {
                    var subgraphName = line.replace(/.*subgraph\s*"?([^"]*)"?.*/, '$1');
                    formatted.push('<div style="margin: 8px 0; font-weight: 600; color: #2d3748; background: #edf2f7; padding: 6px 10px; border-left: 4px solid #4299e1; border-radius: 4px;">📁 ' + subgraphName + '</div>');
                    indentLevel++;
                    continue;
                }
                
                // Format end subgraph
                if (line === 'end') {
                    indentLevel = Math.max(0, indentLevel - 1);
                    continue;
                }
                
                // Format connections
                if (line.includes('-->') || line.includes('->') || line.includes('->>')) {
                    var parts = line.split(/--?>?>?/);
                    if (parts.length >= 2) {
                        var from = parts[0].trim();
                        var to = parts[1].trim();
                        var indent = '  '.repeat(indentLevel);
                        formatted.push('<div style="margin: 4px 0; color: #4a5568; padding-left: ' + (indentLevel * 20) + 'px;">' + 
                                     '<span style="color: #2b6cb0; font-weight: 500;">' + from + '</span> ' +
                                     '<span style="color: #e53e3e; font-weight: bold;">→</span> ' +
                                     '<span style="color: #2b6cb0; font-weight: 500;">' + to + '</span></div>');
                    }
                    continue;
                }
                
                // Format participants (sequence diagrams)
                if (line.includes('participant')) {
                    var participant = line.replace(/participant\s*/, '');
                    formatted.push('<div style="margin: 4px 0; color: #2d3748; font-weight: 500; padding-left: ' + (indentLevel * 20) + 'px;">👤 ' + participant + '</div>');
                    continue;
                }
                
                // Format entity definitions (ER diagrams)
                if (line.includes('{') && !line.includes('}')) {
                    var entity = line.replace('{', '').trim();
                    formatted.push('<div style="margin: 8px 0; font-weight: 600; color: #2d3748; background: #f7fafc; padding: 8px 12px; border: 1px solid #e2e8f0; border-radius: 4px; padding-left: ' + (indentLevel * 20) + 'px;">🗂️ ' + entity + '</div>');
                    continue;
                }
                
                // Format regular lines
                if (line && !line.includes('}')) {
                    var indent = '  '.repeat(indentLevel);
                    formatted.push('<div style="margin: 2px 0; color: #4a5568; padding-left: ' + (indentLevel * 20 + 10) + 'px; font-size: 13px;">• ' + line + '</div>');
                }
            }
            
            return formatted.join('');
        },
        
        
        createErrorFallback: function(element) {
            var container = document.createElement('div');
            container.className = 'mermaid-enhanced';
            container.innerHTML = `
                <div class="mermaid-header">⚠️ Diagram Rendering Notice</div>
                <div class="mermaid-diagram">
                    <div style="margin-top: 15px; padding: 15px; background: #fff8e1; border-left: 4px solid #ffc107; border-radius: 4px;">
                        <p style="margin: 0 0 10px 0; font-weight: 600; color: #e65100;">The diagram is displayed in accessible format for compatibility.</p>
                        <p style="margin: 0; color: #bf360c; font-size: 12px;">Content remains readable across all devices and network conditions.</p>
                    </div>
                </div>
            `;
            element.parentNode.replaceChild(container, element);
        },
        
        render: function(definition, element) {
            if (element) {
                element.innerHTML = definition;
                this.renderElement(element);
            }
        }
    };
    
    return mermaidAPI;
});